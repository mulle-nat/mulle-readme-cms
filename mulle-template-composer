#! /usr/bin/env mulle-bash

[ "${TRACE}" = 'YES' -o "${MULLE_TEMPLATE_COMPOSER_TRACE}" = 'YES' ] && set -x && : "$0" "$@"


usage()
{
   [ $# -ne 0 ] && log_error "$*"

   cat <<EOF
Usage:
   ${MULLE_USAGE_NAME} mulle-template-composer [outputfile]

   By default "outputfile" is taken to be README.md. mulle-template-composer
   will look for a file "README.md.scion" and use this to produce
   README.md.

   Data is read from a file "properties.plist".

   The default search path for includes is "includes:../includes", but this
   can be overridden with the environment variable
   MULLE_TEMPLATE_COMPOSER_SEARCHPATH.

EOF

   exit 1
}


main()
{
   while [ $# -ne 0 ]
   do
      if options_technical_flags "$1"
      then
         shift
         continue
      fi

      case "$1" in
         # handle other flags here

         -*)
            usage "Unknown option \"$1\""
         ;;

         *)
            break
         ;;
      esac

      shift
   done


   options_setup_trace "${MULLE_TRACE}" && set -x

   [ $# -gt 1 ] && shift && usage "Superflous arguments \"$*\""

   PATH="`dirname -- $0`:$PATH:"

   #
   # global! TMPFILE
   #
   set -e

   r_make_tmp_file
   TMPFILE="${RVAL}"

   trap 'rm "${TMPFILE}"' INT
   trap 'rm "${TMPFILE}"' EXIT

   local outfile

   outfile="${1:-README.md}"

   MULLE_TEMPLATE_COMPOSER_SEARCHPATH="${MULLE_TEMPLATE_COMPOSER_SEARCHPATH:-\
"includes\
:../includes\
:../../includes\
"}"

   local item
   local template
   local properties
   local searchpath

   r_colon_concat "." "${MULLE_TEMPLATE_COMPOSER_SEARCHPATH}"
   searchpath="${RVAL}"

   .foreachpath item in ${searchpath}
   .do
      if [ -z "${template}" ]
      then
         r_filepath_concat "${item}" "${outfile}.scion"
         if [ -f "${RVAL}" ]
         then
            template="${RVAL}"
            log_fluff "Found template \"${template}\""
         fi
      fi

      if [ -z "${properties}" ]
      then
         r_filepath_concat "${item}" "properties.plist"
         if [ -f "${RVAL}" ]
         then
            properties="${RVAL}"
            log_fluff "Found properties \"${properties}\""
         else
            # untested, but could work
            r_filepath_concat "${item}" "properties.json"
            if [ -f "${RVAL}" ]
            then
               properties="${RVAL}"
               log_fluff "Found properties \"${properties}\""
            fi
         fi
      fi
   .done

   template="${template:-"${outfile}.scion"}"
   properties="${properties:-"properties.plist"}"

   exekutor mulle-scion -I "${MULLE_TEMPLATE_COMPOSER_SEARCHPATH}" \
                        "${template}" \
                        "${properties}" \
                        "${TMPFILE}"

   local toc

   # Don't toc anymore because github has toc generator
   # toc="`rexekutor make-toc.sed < "${TMPFILE}" | sed 's/"/\"/g'`"

   exekutor mulle-template --clean-env \
                           -f \
                           -DTABLE_OF_CONTENTS="${toc}" \
                           "${TMPFILE}" \
                           "${outfile}"
}

main "$@"
